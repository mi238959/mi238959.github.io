{"version":3,"sources":["components/Image/MirandaFoster.jpg","components/Card/index.js","components/CardList/index.js","components/Image/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","this","title","content","React","Component","CardList","state","cardData","cards","map","v","key","console","log","Image","Header","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6EAAAA,EAAOC,QAAU,IAA0B,2C,48CCmB5BC,G,iBAfb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDA,MAAQA,EAFK,E,sEAMlB,OACE,yBAAKC,UAAU,QACb,4BAAKC,KAAKF,MAAMG,OAChB,2BAAID,KAAKF,MAAMI,c,GAVJC,IAAMC,Y,QC2BVC,E,YAxBb,WAAaP,GAAQ,IAAD,8BAClB,4CAAOA,KACFQ,MAAQ,CACXC,SAAUA,EAASC,OAHH,E,sEAQT,IAAD,OACR,OACE,oCACGR,KAAKM,MAAMC,SACXE,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAET,MACvBA,MAAOS,EAAET,MACTC,QAASQ,EAAER,QACXK,SAAU,EAAKD,MAAMC,mB,GAhBRJ,IAAMC,W,gBCH7BQ,QAAQC,IAAIC,KAKGC,MAJf,WAEE,OAAO,yBAAKC,IAAKF,IAAOG,IAAI,UCYfC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.a5524e95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/MirandaFoster.d813b310.jpg\";","import React from 'react'\r\nimport './index.css'\r\n\r\nclass Card extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.props = props\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <h3>{this.props.title}</h3>\r\n        <p>{this.props.content}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from '../Card/index.js'\r\nimport '../Card/index.css'\r\nimport cardData from './data.json'\r\n\r\nclass CardList extends React.Component {\r\n  constructor (props) {\r\n    super (props)\r\n    this.state = {\r\n      cardData: cardData.cards\r\n    }\r\n  }\r\n\r\n\r\n  render () {\r\n    return (\r\n      <>\r\n        {this.state.cardData\r\n        .map((v) => <Card key={v.title} \r\n          title={v.title} \r\n          content={v.content}\r\n          cardData={this.state.cardData}\r\n          \r\n        /> )}\r\n       </>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\nimport Image from './MirandaFoster.jpg'; // Tell webpack this JS file uses this image\r\nconsole.log(Image); // /logo.84287d09.png\r\nfunction Header() {\r\n  // Import result is the URL of your image\r\n  return <img src={Image} alt=\"Logo\" />;\r\n}\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport CardList from './components/CardList';\nimport Header from './components/Image';\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <CardList />\n    </div> \n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}